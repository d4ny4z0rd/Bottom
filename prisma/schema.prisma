// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId   String          @unique
  email         String          @unique
  name          String?
  imageUrl      String?

  posts         Post[]
  comments      Comment[]
  likes         Like[]

  following     String[]
  followers     String[]

  followersCount  Int           @default(0)
  followingCount  Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  headline      String?
  description   String
  author        User            @relation(fields: [authorId], references: [clerkUserId], onDelete: Cascade)
  authorId      String
  authorName    String
  authorImage   String

  comments      Comment[]       
  likes         Like[]         

  commentCount  Int             @default(0)
  likeCount     Int             @default(0)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Comment {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  author        User            @relation(fields: [authorId], references: [clerkUserId], onDelete: Cascade)
  post          Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String          @db.ObjectId
  authorId      String
  authorName    String
  authorImage   String

  likes         Like[]          

  likeCount     Int             @default(0)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Like{
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User            @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)
  userId        String
  post          Post?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        String?         @db.ObjectId
  comment       Comment?        @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId     String?         @db.ObjectId

  createdAt     DateTime        @default(now())
}